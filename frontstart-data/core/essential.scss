/**
 * Function: Get
 * Description: Universal get function to get values from map or nested map
 * Usage example: get($font, size); get($color, green, dark);
 */

@function get($map, $key1: default, $key2: default) {
    @if map-has-key($map, $key1) {

        @each $key, $value in $map {

            @if type-of($value) == "map" {
                @return map-get(map-get($map, $key1), $key2);
            }

            @return map-get($map, $key1);
        }
    }
}


/**
 * Function: Color
 * Description: Get values from the map $color
 * Usage example: color(green); color(green, dark); Default color is auto selected
 */

@function color($colorValue, $tintValue: default) {
    @if map-has-key($color, $colorValue) {
        @return map-get(map-get($color, $colorValue), $tintValue);
    }
}


/**
 * Function: Font
 * Description: Get values from the map $font
 * Usage example: font(primair; font(secundair, size); Value family is auto selected
 */

@function font($fontCategory, $fontValue: family) {
    @if map-has-key($font, $fontCategory) {
        @return map-get(map-get($font, $fontCategory), $fontValue);
    }
}


/**
 * Function: Offset
 * Description: Get values from the map $offset
 * Usage example: offset(); offset(1-2); Value 1 is auto selected
 */

@function offset($offsetValue: 1) {
    @if map-has-key($offset, $offsetValue) {
        @return unquote(map-get($offset, $offsetValue));
    }
}


/**
 * Mixin: Debug map
 * Description: Debug map with output to main.css
 * Usage example: @include debug-map($color);
 */

@mixin debug-map($map) {
    @at-root {
        @debug-map {
            __length__: length($map);
            __properties__ {
                @each $key, $value in $map {
                    #{'(' + type-of($value) + ') ' + $key}: inspect($value);
                }
            }
        }
    }
}


/**
 * Variables: Media
 * Description: Standardized media values for media queries
 * Usage example: @media *{$is-small} { your style } (* should be #)
 */

// Config
$small: 0;
$medium: 768;
$large: 1280;

// Query
$is-small: "(max-width: #{$medium - 1}px)";
$is-medium: "(min-width: #{$medium}px) and (max-width: #{$large - 1}px)";
$is-large: "(min-width: #{$large}px)";
$is-small-medium: "(max-width: #{$large - 1}px)";
$is-medium-large: "(min-width: #{$medium}px)";
$is-landscape: "(orientation: landscape)";
$is-portrait: "(orientation: portrait)";
$and-landscape: "and (orientation: landscape)";
$and-portrait: "and (orientation: portrait)";
$is-hdpi: "(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)";
$and-hdpi: "and (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)";


/**
 * Maps: Offset
 * Description: Standardized offset values for a.o. padding and margin
 * Usage example: margin-bottom: offset(2);
 */

// Config
$offset-config: (
    base: 1,
    unit: rem
);

// Offset
$offset: (
    1-4: get($offset-config, base) / 4 + get($offset-config, unit),
    1-3: get($offset-config, base) / 3 + get($offset-config, unit),
    1-2: get($offset-config, base) / 2 + get($offset-config, unit),
    1: get($offset-config, base) + get($offset-config, unit),
    2: get($offset-config, base) * 2 + get($offset-config, unit),
    3: get($offset-config, base) * 3 + get($offset-config, unit),
    4: get($offset-config, base) * 4 + get($offset-config, unit)
);


/**
 * Map: Color
 * Description: Standardized colors
 * Usage example: color: color(green, light);
 */

// Names
$color-name: (
    black: (
        default: #000,
        light: #333
    ),

    blue: (
        default: #3073aa,
        dark: #164063,
        light: #679dca
    ),

    green: (
        default: #6b8e23,
        dark: blue,
        light: #87a648
    ),

    gray: (
        default: #aaa,
        dark: #666,
        light: #ddd
    ),

    orange: (
        default: #cf9336,
        dark: #97661b,
        light: #e3bb7b
    ),

    red: (
        default: #bc4327,
        dark: #7b2a17,
        light: #dc826e
    ),

    white: (
        default: #fff,
        dark: #f5f5f5
    )
);

// Type
$color-type: (
    positive: (
        default: get($color-name, green),
        dark: get($color-name, green, dark),
        light: get($color-name, green, light)
    ),

    neutral: (
        default: get($color-name, blue),
        dark: get($color-name, blue, dark),
        light: get($color-name, blue, light)
    ),

    resistance: (
        default: get($color-name, orange),
        dark: get($color-name, orange, dark),
        light: get($color-name, orange, light)
    ),

    negative: (
        default: get($color-name, red),
        dark: get($color-name, red, dark),
        light: get($color-name, red, light),
    )
);


// All colors (merged)
$color: map-merge($color-name, $color-type);


/**
 * Map: Font
 * Description: Standardized fonts
 * Usage example: font(primair, size);
 */

$font: (
    primary: (
        color: color(black, light),
        family: ("Arial", "Helvetica"),
        size: 14px,
        size-small: 12px,
        size-large: 16px,
        line-height: 1.4,
        line-height-small: 1,
        line-height-large: 1.8,
        weight: normal
    ),

    secundary: (
        color: color(black, light),
        family: ("Verdana", "Arial", "Helvetica"),
        size: 14px,
        size-small: 12px,
        size-large: 16px,
        line-height: 1.4,
        line-height-small: 1,
        line-height-large: 1.8,
        weight: normal
    )
);